assembly "..\..\Libraries\Compression\bin\Debug\net6.0\Compression.dll";
assembly "..\..\Libraries\ImageProcessor\bin\Debug\net6.0\ImageProcessor.dll";
assembly "..\..\Libraries\Vera\bin\Debug\net6.0\Vera.dll";
using Compression;
using ImageProcessor;
using Vera;
machine CommanderX16R38;

    BM.X16Header(); // byte code to start execution.

    VideoMemory.SetCopyZpWordAddress(0x00); // define where in ZP the copy can use.
    Inflator.SetSourceZp(0x00); // define where in ZP we can use for inflating. 

    Video.Mode(Layers.None); // disable all layers and sprites while the image inflates.

    Video.Scaling(Resolution.Half); // 320x240

    Video.LayerBitmap(ConfigLayer.Layer0, Depth.Bpp_8, BitmapWidth.Half_320, 0x1000);

    ; in case colour 0 is not black!
    lda #$11
    sta ADDRx_H
    lda #$fa
    sta ADDRx_M
    stz ADDRx_L
    stz DATA0
    stz DATA0

    ; call decompress
    Inflator.InflateToVram("compressed_data", 0x1000);

    var imageData = ImageAsset.LoadFullImage(@"Assets\bliss.bmp");

    ; copy palette to vera
    VideoMemory.Copy("palette", 0x1fa00, imageData.X16Colours.Length);

    Video.Mode(Layers.Layer0); // turn on layer 0 to show the image.

    ; infinite loop
    .loop:
        jmp loop

    Inflator.InflateToVramCode(); // decompressor proc code.
    
    VideoMemory.CopyProc(); // copy proc code.
 
    .palette:
    BM.Bytes(imageData.X16Colours);
    
    var compressed = Deflator.Deflate(imageData.Pixels);
    ; Source data is @(imageData.Pixels.Length) bytes.
    ; Compressed data is $@(compressed.Length.ToString("X4")) bytes.
    .compressed_data:
    BM.Bytes(compressed);

    ; scratch space for decompression.
    .segment Variables, $400
    Inflator.DefineScratchArea();
    .endsegment

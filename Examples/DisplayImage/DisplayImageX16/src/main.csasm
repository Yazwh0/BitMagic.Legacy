assembly "..\..\Libraries\Compression\bin\Debug\net6.0\Compression.dll";
assembly "..\..\Libraries\ImageProcessor\bin\Debug\net6.0\ImageProcessor.dll";
assembly "..\..\Libraries\Vera\bin\Debug\net6.0\Vera.dll";
using Compression;
using ImageProcessor;
using Vera;

    BM.X16Header(); // byte code to start execution.

    Inflator.SetSourceZp(0x00); // define where in ZP we can use for inflating. 

    Video.Mode(Layers.None); // disable all layers while the image inflates.

    Video.Scaling(Resolution.Half);

    Video.LayerBitmap(ConfigLayer.Layer0, Depth.Bpp_8, BitmapWidth.Half_320, 0x1000);

    ; in case colour 0 is not black!
    lda #$11
    sta ADDRx_H
    lda #$fa
    sta ADDRx_M
    stz ADDRx_L
    stz DATA0
    stz DATA0

    ; call decompress
    Inflator.InflateToVram("compressed_data", 0x1000);

    var imageData = ImageAsset.LoadFullImage(@"Assets\bliss.bmp");

    ; copy palette to VRAM
    lda #$11
    sta ADDRx_H
    lda #$fa
    sta ADDRx_M
    stz ADDRx_L

    var length = imageData.X16Colours.Length;
    var thisIteration = (length > 0xff) ? 0xff : length;

    ; crap copy loop
    ;stp
    ldx #@(thisIteration)
    .copyloop:
    lda palette
    sta DATA0
    inc copyloop+1
    dex
    bne copyloop

    if (length > thisIteration)
    {
        .tochange:
        bne copydone ; gets updated, beq will be false first time
        inc copyloop+2
        ldx #@(length - 0xff) ; length - 0xff to not clear
        lda #$f0 ; beq
        sta tochange
        bra copyloop
        .copydone:
    }

    ; turn on layer 0 to show the image.
    Video.Mode(Layers.Layer0);

    ; infinite loop
    .loop:
        jmp loop

    ; decompressor code. need to call this to generate the .proc
    Inflator.InflateToVramCode();

    var compressed = Deflator.Deflate(imageData.Pixels);
 
    .align $100
    .palette:
    BM.Bytes(imageData.X16Colours);
    
    ; Source data is @(imageData.Pixels.Length) bytes.
    ; Compressed data is $@(compressed.Length.ToString("X4")) bytes.

    .compressed_data:
    BM.Bytes(compressed);

    ; scratch space for decompression.
    .align $100
    Inflator.DefineScratchArea();


reference System.IO.FileSystem
using System.IO

void ColourFunction(string name, ushort colour)
{
	.proc @name
	lda #<@colour
	sta data
	lda #>@colour
	sta data
	rts
}

.define name=rom, address=$c000, filename="rom.bin"

.scope main

; entrypoint
@X16Header();

.const data0 = $9F23
.const data1 = $9F24
.const addr_l = $9F20
.const addr_m = $9F21
.const addr_h = $9F22
.const ctrl = $9f25
.const ien = $9F26
.const isr = $9F27
.const irq_line = $9F28
.const dc_video = $9F29
.const l0_config = $9F2D
.const l0_mapbase = $9F2E
.const l0_tilebase = $9F2F

.const start = $01
.const colourswitch = $00

	stz start

	lda #$02
	sta ien

	lda start
	sta irq_line

	stz ctrl
	;     FS10-Cmm
	lda #0b00010001
	sta dc_video

	;      hhwwtbcc
	lda #0b00000010 ; tiles 4bp
    sta l0_config

	stz l0_mapbase

	lda #0b00110000 ; tiles at $6000
	sta l0_tilebase

	jsr copydata

	lda #$10 
    sta addr_h
    stz addr_m
    stz addr_l

	lda #$01
	sta data0

	lda #<vsync
	sta $314
	lda #>vsync
	sta $315

.loop:
	jmp loop

.proc copydata

.const address = $6000
.const size = 64

    lda #^address + $10 ; add on 1byte increment
    sta addr_h
    lda #>address
    sta addr_m
    lda #<address
    sta addr_l

    ; y low value
    ; x high value
    ldy #<size
    ldx #>size+1 ; +1 as we check the end when we reduce x

    lda #<tile
    sta copydata_src + 1
    lda #>tile
    sta copydata_src + 2

.copydata_src:
    lda $1234 ; gets modified
    sta data0

    inc copydata_src + 1
    bne noinc

    inc copydata_src + 2

.noinc:
    dey
    bne copydata_src

    dex
    beq copydata_done
    jmp copydata_src

.copydata_done:
    rts
.endproc

.proc vsync

	lda colourswitch
	bne setcolour

	lda #$01
	sta addr_h
	lda #$fa
	sta addr_m
	stz addr_l

	stz data0

	lda #$01
	sta colourswitch

	lda #$ff
	sta irq_line

	stz isr

	ply
	plx
	pla
	rti

.setcolour:

	lda #$01
	sta addr_h
	lda #$fa
	sta addr_m
	stz addr_l

	lda #$0a
	sta data0

	inc start
	lda start
	and #0b01111111

	sta irq_line

	stz colourswitch

	stz isr

	ply
	plx
	pla
	rti

.endproc

; will not be loaded as its in its own anonymous proc.
.tile:
.byte $01, $11, $11, $00
.byte $10, $00, $00, $10
.byte $10, $00, $00, $10
.byte $10, $00, $00, $10
.byte $10, $00, $00, $10
.byte $10, $00, $00, $10
.byte $01, $11, $11, $00
.byte $00, $00, $00, $00

.byte $11, $11, $99, $99
.byte $22, $22, $aa, $aa
.byte $33, $33, $bb, $bb
.byte $44, $44, $cc, $cc
.byte $55, $55, $dd, $dd
.byte $66, $66, $ee, $ee
.byte $77, $77, $ff, $ff
.byte $88, $88, $00, $00

.segment rom
.const isr = $9F27

.proc startup
	jmp $801
.endproc

.proc irq
	
	pha
	phx
	phy

	lda $314
	beq no_handle

	jmp ($314)

.no_handle:
	stz isr

	ply
	plx
	pla
	rti

.endproc

.pad $fffa
.word irq
.word startup
.word irq
.endsegment

//ColourFunction("set_white", 0xfff0);
//ColourFunction("set_grey", 0x8880);

var sintable = new byte[32];
for(var i = 0; i < 32; i++)
{
	sintable[i] = (byte)(Math.Sin((i * 360 / 32) * (Math.PI / 180)) * 128 + 128);
}
.sintable:
//@Bytes(sintable);

.datatable:
//@Bytes(new byte[] { 0x00, 0x02, 0x04, 0x06 });

var x = File.ReadAllBytes("C:\\Temp\\Reflections_Demo\\README.txt");
.somefile:
//@Bytes(x.Take(10));

//@Words(new ushort[] { 0xffff, 0x00, 0xff00});
//@Words(new short[] { 1000, -1000});

.endscope

